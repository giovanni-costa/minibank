import { Injectable } from '@nestjs/common';
import { CreateAdminDto } from './dto/create-admin.dto';
import { UpdateAdminDto } from './dto/update-admin.dto';
import { PrismaService } from 'src/PrismaService';
import { cpfGenerator } from 'src/cpfgenerator';

@Injectable()
export class AdminService {
  
  constructor(private prisma: PrismaService){}

  async createCustomer(data: CreateAdminDto) {

    // Throws Error if an ID is given
    if(data.id) { throw new Error('IDs are autogenerated') }

    // If a CPF is not given, creates a valid one
    //.. This is only valid to help creating mock users
    if(!data.cpf) {data.cpf = cpfGenerator()}

    // Throw Error if CPF exists
    const cpfExists = await this.prisma.miniBanco.findFirst({
      where:{
        cpf: data.cpf,
      }
    })

    if(cpfExists) { throw new Error('CPF Already Exists!')}

    // Create the new USER
    const create = await this
    .prisma
    .miniBanco
    .create({
      data,
    })

    return create;
  }

  async findAllCustomers() {

    return await this.prisma.miniBanco.findMany()

  }

  async findOneCustomer(id: string){

    return await this.prisma.miniBanco.findUniqueOrThrow({
      where:{
        id : id
      }
    })
  }

  async updateCustomer(id: string, data: UpdateAdminDto){

    // Throw Error if USER doesnt exist
    const user = await this.prisma.miniBanco
      .findUnique({
        where:{
          id: id
        }
      })

    if(!user) { throw new Error('User Does NOT Exist')}

    // Update USER data
    return await this.prisma.miniBanco.update({
      data,
      where:{
        id : id
      }
    })
  }

  async removeCustomer(id: string) {

    // Throw Error if USER doesnt exist
    const user = await this.prisma.miniBanco
      .findUnique({
        where:{
          id: id
        }
      })

    if(!user) { throw new Error('User Does NOT Exist')}

    return await this.prisma.miniBanco.delete({
      where:{
        id : id
      }
    })
  }
}
