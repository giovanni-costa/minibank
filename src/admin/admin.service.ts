import { Injectable } from '@nestjs/common';
import { CreateAdminDto, FindCustomer } from './dto/create-admin.dto';
import { UpdateAdminDto } from './dto/update-admin.dto';
import { PrismaService } from 'src/PrismaService';
import { cpfGenerator } from 'src/cpfgenerator';
import { HttpException } from '@nestjs/common/exceptions';
import { HttpStatus } from '@nestjs/common/enums';

@Injectable()
export class AdminService {
  constructor(private prisma: PrismaService) {}

  async createCustomer(data: CreateAdminDto) {
    // Encrypts given Password
    const bcrypt = require('bcrypt');
    const salt = bcrypt.genSaltSync(10);
    const hash = bcrypt.hashSync(data.password.toString(), salt);
    data.password = hash.toString();

    // Throws Error if an ID is given
    if (data.id) {
      throw new HttpException('IDs are autogenerated', HttpStatus.BAD_REQUEST);
    }

    // If a CPF is not given, creates a valid one
    //.. This is only valid to help creating mock users
    if (!data.cpf) {
      data.cpf = cpfGenerator();
    }

    // Throw Error if CPF exists
    const cpfExists = await this.prisma.miniBanco.findFirst({
      where: {
        cpf: data.cpf,
      },
    });

    if (cpfExists) {
      throw new HttpException('CPF already exists', HttpStatus.CONFLICT);
    }

    // Create the new USER
    const create = await this.prisma.miniBanco.create({
      data,
    });

    return create;
  }

  async findAllCustomers(query: FindCustomer) {
    return await this.prisma.miniBanco.findMany({
      where: query,
    });
  }

  async findOneCustomer(id: string) {
    return await this.prisma.miniBanco.findUniqueOrThrow({
      where: {
        id: id,
      },
      select: {
        name: true,
      },
    });
  }

  async updateCustomer(id: string, data: UpdateAdminDto) {
    // Throw Error if USER doesnt exist
    const user = await this.prisma.miniBanco.findUnique({
      where: {
        id: id,
      },
    });

    if (!user) {
      throw new HttpException('User does not exist', HttpStatus.NOT_FOUND);
    }

    // Update USER data
    return await this.prisma.miniBanco.update({
      data,
      where: {
        id: id,
      },
    });
  }

  async removeCustomer(id: string) {
    // Throw Error if USER doesnt exist
    const user = await this.prisma.miniBanco.findUnique({
      where: {
        id: id,
      },
    });

    if (!user) {
      throw new HttpException('User does not exist', HttpStatus.NOT_FOUND);
    }

    return await this.prisma.miniBanco.delete({
      where: {
        id: id,
      },
    });
  }
}
